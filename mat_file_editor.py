# -*- coding: utf-8 -*-
"""cis700_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XfW9-6fISP-D9wY0BdTUb_t9Mq_xO_FM
"""

import numpy as np
from datetime import datetime, timedelta
from google.colab import drive
from scipy.io import loadmat
from scipy.io import savemat
import torch
import torchvision.transforms as transforms

drive.mount('/content/gdrive/')

dataset_folder = '/content/gdrive/My Drive/cis700_project/'

wiki_mat = loadmat(dataset_folder+'wiki.mat')

for key,value in wiki_mat.items():
  print(key,value)

def return_age(matlab_datenum):
  return datetime.fromordinal(int(matlab_datenum)) \
         + timedelta(days=matlab_datenum%1) - timedelta(days = 366)

#dob of celebrity
age = wiki_mat['wiki'][0][0][0][0].astype(np.float)
age = [return_age(x).year for x in age]

#year in which the photo was taken
year = wiki_mat['wiki'][0][0][1][0]
#age of the celebrity in that picture
age_of_picture = np.subtract(year,age)
#path to the photo
path = wiki_mat['wiki'][0][0][2][0]

#face_score: detector score (the higher the better). Inf implies that no 
#face was found in the image and the face_location then just returns the entire image
face_score = wiki_mat['wiki'][0][0][6][0]

# second_face_score: detector score of the face with the second highest score. 
# This is useful to ignore images with more than one face. 
# second_face_score is NaN if no second face was detected.
second_face_score = wiki_mat['wiki'][0][0][7][0]

wiki_20_30 = {'DOB_celebrity':[]
       ,'year_picture':[]
       ,'labels':[]
       ,'path':[]}
for i,j in enumerate(age_of_picture):
  if j>=20 and j<=30:
    if 0 <= face_score[i] <= 10:
      wiki_20_30['DOB_celebrity'].append(wiki_mat['wiki'][0][0][0][0][i])
      wiki_20_30['year_picture'].append(wiki_mat['wiki'][0][0][1][0][i])
      wiki_20_30['labels'].append(0)
      wiki_20_30['path'].append(wiki_mat['wiki'][0][0][2][0][i][0])
  if j>=40 and j<=50:
    if 0 <= face_score[i] <= 10:
      wiki_20_30['DOB_celebrity'].append(wiki_mat['wiki'][0][0][0][0][i])
      wiki_20_30['year_picture'].append(wiki_mat['wiki'][0][0][1][0][i])
      wiki_20_30['labels'].append(1)
      wiki_20_30['path'].append(wiki_mat['wiki'][0][0][2][0][i][0])

wiki_20_30['labels'] = np.array(wiki_20_30['labels']).reshape(1,-1)
savemat('wiki_crop.mat', wiki_20_30, oned_as='row')
